MERGE INTO `sap-adapter.slt_staging.material_master_accounting_data` tgt
USING (
WITH mbew as
(select MANDT as client,
MATNR as material,
BWKEY as valuation_area,
BWTAR as valuation_type,
LVORM as valuation_type_1,
LBKUM as total_stock,
SALK3 as total_value,
VPRSV as price_control,
VERPR as moving_price,
STPRS as standard_price,
PEINH as price_unit,
BKLAS as valuation_class,
SALKV as value_ma_price,
VMKUM as total_stock_pp,
VMSAL as total_value_pp,
VMVPR as price_ctrl_pp,
VMVER as movavgprice_pp,
VMSTP as std_price_pp,
VMPEI as price_unit_pp,
VMBKL as val_class_pp,
VMSAV as value_prev_per,
VJKUM as total_stock_py,
VJSAL as total_value_py,
VJVPR as price_ctrl_py,
VJVER as movavgprice_py,
VJSTP as std_price_py,
VJPEI as price_unit_py,
VJBKL as val_class_py,
VJSAV as value_prev_year,
LFGJA as year_cur_period,
LFMON as current_period,
BWTTY as valuation_cat,
STPRV as previous_price,
LAEPR as last_price_chng,
ZKPRS as future_price,
ZKDAT as valid_from,
TIMESTAMP as time_stamp,
BWPRS as tax_price_1,
BWPRH as comm_price_1,
VJBWS as tax_price_3,
VJBWH as coml_price_3,
VVJSL as valued_at,
VVJLB as total_stock_ybl,
VVMLB as total_stock_pbl,
VVSAL as valued_at_1,
ZPLPR as fut_plnd_price,
ZPLP1 as planned_price_1,
ZPLP2 as planned_price_2,
ZPLP3 as planned_price_3,
ZPLD1 as plnd_pr_date_1,
ZPLD2 as plnd_pr_date_2,
ZPLD3 as plnd_pr_date_3,
PPERZ as fut_c_e_period,
PPERL as current_c_e_pd,
PPERV as prev_c_e_per,
KALKZ as fut_cost_est,
KALKL as curr_cost_est,
KALKV as prev_cost_est,
KALSC as overhead_key,
XLIFO as lifo_fifo_rel,
MYPOL as lifo_pool,
BWPH1 as commercial_pr_2,
BWPS1 as tax_price_2,
ABWKZ as devaluation_ind,
PSTAT as maint_status,
KALN1 as prodcostest_no,
KALNR as cost_estimateno,
BWVA1 as valuation_var,
BWVA2 as valuation_var_1,
BWVA3 as valuation_var_2,
VERS1 as costing_version,
VERS2 as costing_version_1,
VERS3 as costing_version_2,
HRKFT as origin_group,
KOSGR as overhead_group,
PPRDZ as posting_period,
PPRDL as current_period_1,
PPRDV as previous_period,
PDATZ as fut_fyyear,
PDATL as current_fyear,
PDATV as previous_fyear,
EKALR as cost_est_w_qs,
VPLPR as prev_plnd_price,
MLMAA as ml_act,
MLAST as price_determ,
LPLPR as crnt_plan_price,
VKSAL as total_sp_value,
HKMAT as material_origin,
SPERW as phys_inv_blk,
KZIWL as ph_inv_vo_mat,
WLINL as last_count_date,
ABCIW as cc_phys_inv,
BWSPA as val_margin,
LPLPX as fxd_curr_planprice,
VPLPX as prev_plprice_fixed,
FPLPX as fut_planprice_fxd,
LBWST as curr_val_strat,
VBWST as prev_valn_strat,
FBWST as future_valstratgy,
EKLAS as vc_sal_ord_stk,
QKLAS as project_stk_vc,
MTUSE as material_usage,
MTORG as material_origin_1,
OWNPR as prod_in_house,
XBEWM as valuated_uom,
BWPEI as price_unit_1,
MBRUE as mbewh_rec_already_exists_for,
OKLAS as vc_vendor,
DUMMY_VAL_INCL_EEW_PS as md_product_valuation_extension,
OIPPINV as prepaid_inv,
_sequence_num as dw_input_sequence,
TO_HEX(MD5((select string_agg(CAST(col as STRING), ', ' order by offset)
    				from unnest(split(trim(format('%t',(select as struct mbew.* except(_is_deleted,_row_id,_source_timestamp,_sequence_num))), '()'),', ')) col with offset
    				where not col IS NULL))) as finalmd5key
from `sap-adapter.slt_raw.mbew` as mbew
where mbew._sequence_num > coalesce((select case when full_delta_indicator = 'F'
    												then min_input_sequence_num
    											when full_delta_indicator <> 'F'
    											then max_input_sequence_num
    											end
    										from `sap-adapter.slt_staging.staging_audit_table`
    											where table_name = 'material_master_accounting_data'),0))
select client as client_key,
material as material_key,
valuation_area as valuation_area_key,
valuation_type as valuation_type_key,
*
From  mbew
UNION ALL
select null as client_key,
null as material_key,
null as valuation_area_key,
null as valuation_type_key,
mbew.*
From mbew as mbew
INNER JOIN `sap-adapter.slt_staging.material_master_accounting_data` as uji
ON mbew.client = uji.client
AND mbew.material = uji.material
AND mbew.valuation_area = uji.valuation_area
AND mbew.valuation_type = uji.valuation_type
AND mbew.finalmd5key != uji.finalmd5key
WHERE uji.dw_active_indicator = 'Y') as src
ON src.client_key = tgt.client
AND src.material_key = tgt.material
AND src.valuation_area_key = tgt.valuation_area
AND src.valuation_type_key = tgt.valuation_type
WHEN MATCHED AND src.finalmd5key != tgt.finalmd5key
    THEN UPDATE set tgt.dw_active_indicator = 'N',
    tgt.dw_last_update_date = CURRENT_DATETIME()
    WHEN NOT MATCHED THEN
insert(client,
material,
valuation_area,
valuation_type,
valuation_type_1,
total_stock,
total_value,
price_control,
moving_price,
standard_price,
price_unit,
valuation_class,
value_ma_price,
total_stock_pp,
total_value_pp,
price_ctrl_pp,
movavgprice_pp,
std_price_pp,
price_unit_pp,
val_class_pp,
value_prev_per,
total_stock_py,
total_value_py,
price_ctrl_py,
movavgprice_py,
std_price_py,
price_unit_py,
val_class_py,
value_prev_year,
year_cur_period,
current_period,
valuation_cat,
previous_price,
last_price_chng,
future_price,
valid_from,
time_stamp,
tax_price_1,
comm_price_1,
tax_price_3,
coml_price_3,
valued_at,
total_stock_ybl,
total_stock_pbl,
valued_at_1,
fut_plnd_price,
planned_price_1,
planned_price_2,
planned_price_3,
plnd_pr_date_1,
plnd_pr_date_2,
plnd_pr_date_3,
fut_c_e_period,
current_c_e_pd,
prev_c_e_per,
fut_cost_est,
curr_cost_est,
prev_cost_est,
overhead_key,
lifo_fifo_rel,
lifo_pool,
commercial_pr_2,
tax_price_2,
devaluation_ind,
maint_status,
prodcostest_no,
cost_estimateno,
valuation_var,
valuation_var_1,
valuation_var_2,
costing_version,
costing_version_1,
costing_version_2,
origin_group,
overhead_group,
posting_period,
current_period_1,
previous_period,
fut_fyyear,
current_fyear,
previous_fyear,
cost_est_w_qs,
prev_plnd_price,
ml_act,
price_determ,
crnt_plan_price,
total_sp_value,
material_origin,
phys_inv_blk,
ph_inv_vo_mat,
last_count_date,
cc_phys_inv,
val_margin,
fxd_curr_planprice,
prev_plprice_fixed,
fut_planprice_fxd,
curr_val_strat,
prev_valn_strat,
future_valstratgy,
vc_sal_ord_stk,
project_stk_vc,
material_usage,
material_origin_1,
prod_in_house,
valuated_uom,
price_unit_1,
mbewh_rec_already_exists_for,
vc_vendor,
md_product_valuation_extension,
prepaid_inv,
finalmd5key,
dw_input_sequence,
dw_active_indicator,
dw_start_date,
dw_end_date,
dw_last_update_date
)
values(src.client,
src.material,
src.valuation_area,
src.valuation_type,
src.valuation_type_1,
src.total_stock,
src.total_value,
src.price_control,
src.moving_price,
src.standard_price,
src.price_unit,
src.valuation_class,
src.value_ma_price,
src.total_stock_pp,
src.total_value_pp,
src.price_ctrl_pp,
src.movavgprice_pp,
src.std_price_pp,
src.price_unit_pp,
src.val_class_pp,
src.value_prev_per,
src.total_stock_py,
src.total_value_py,
src.price_ctrl_py,
src.movavgprice_py,
src.std_price_py,
src.price_unit_py,
src.val_class_py,
src.value_prev_year,
src.year_cur_period,
src.current_period,
src.valuation_cat,
src.previous_price,
src.last_price_chng,
src.future_price,
src.valid_from,
src.time_stamp,
src.tax_price_1,
src.comm_price_1,
src.tax_price_3,
src.coml_price_3,
src.valued_at,
src.total_stock_ybl,
src.total_stock_pbl,
src.valued_at_1,
src.fut_plnd_price,
src.planned_price_1,
src.planned_price_2,
src.planned_price_3,
src.plnd_pr_date_1,
src.plnd_pr_date_2,
src.plnd_pr_date_3,
src.fut_c_e_period,
src.current_c_e_pd,
src.prev_c_e_per,
src.fut_cost_est,
src.curr_cost_est,
src.prev_cost_est,
src.overhead_key,
src.lifo_fifo_rel,
src.lifo_pool,
src.commercial_pr_2,
src.tax_price_2,
src.devaluation_ind,
src.maint_status,
src.prodcostest_no,
src.cost_estimateno,
src.valuation_var,
src.valuation_var_1,
src.valuation_var_2,
src.costing_version,
src.costing_version_1,
src.costing_version_2,
src.origin_group,
src.overhead_group,
src.posting_period,
src.current_period_1,
src.previous_period,
src.fut_fyyear,
src.current_fyear,
src.previous_fyear,
src.cost_est_w_qs,
src.prev_plnd_price,
src.ml_act,
src.price_determ,
src.crnt_plan_price,
src.total_sp_value,
src.material_origin,
src.phys_inv_blk,
src.ph_inv_vo_mat,
src.last_count_date,
src.cc_phys_inv,
src.val_margin,
src.fxd_curr_planprice,
src.prev_plprice_fixed,
src.fut_planprice_fxd,
src.curr_val_strat,
src.prev_valn_strat,
src.future_valstratgy,
src.vc_sal_ord_stk,
src.project_stk_vc,
src.material_usage,
src.material_origin_1,
src.prod_in_house,
src.valuated_uom,
src.price_unit_1,
src.mbewh_rec_already_exists_for,
src.vc_vendor,
src.md_product_valuation_extension,
src.prepaid_inv,
src.finalmd5key,
src.dw_input_sequence,
'Y',
CURRENT_DATETIME(),
DATETIME(9999, 12, 31, 23, 59, 59),
CURRENT_DATETIME()
);
MERGE INTO `sap-adapter.slt_staging.staging_audit_table` tgt
USING ( SELECT
    		'material_master_accounting_data' as table_name
    		,'mbew' as sap_table_name
    		,CASE WHEN (select full_delta_indicator from `sap-adapter.slt_staging.staging_audit_table` where table_name = 'material_master_accounting_data') IS NULL
    				OR (select full_delta_indicator from `sap-adapter.slt_staging.staging_audit_table` where table_name = 'material_master_accounting_data') = 'F'
    			THEN 'F'
    			ELSE 'D'
    		END AS full_delta_indicator
    		,0 as min_input_sequence_num
    		,(select max(dw_input_sequence) as max_input_sequence_num from `sap-adapter.slt_staging.material_master_accounting_data`) as max_input_sequence_num
    		,(coalesce((select COUNT(*) AS inserted_record_count from `sap-adapter.slt_staging.material_master_accounting_data` a
    		where a.dw_input_sequence > coalesce((select case when full_delta_indicator = 'F'
    						then min_input_sequence_num
    						when full_delta_indicator <> 'F'
    						then max_input_sequence_num
    					end
    				from `sap-adapter.slt_staging.staging_audit_table`
    				where table_name = 'material_master_accounting_data'),0)),(select count(*) AS inserted_record_count from `sap-adapter.slt_staging.material_master_accounting_data`))) AS inserted_record_count
    		,CURRENT_DATETIME() as last_update_date   
    )scr
    on tgt.table_name = scr.table_name
    WHEN MATCHED THEN 
    UPDATE set tgt.min_input_sequence_num = 0
    			,tgt.max_input_sequence_num = scr.max_input_sequence_num
    			,tgt.inserted_record_count = scr.inserted_record_count
    			,tgt.last_update_date = scr.last_update_date
    WHEN NOT MATCHED THEN
    INSERT (table_name,
    		sap_table_name,
    		full_delta_indicator,
    		min_input_sequence_num,
    		max_input_sequence_num,
    		inserted_record_count,
    		last_update_date)
    VALUES(scr.table_name,
    		scr.sap_table_name,
    		scr.full_delta_indicator,
    		scr.min_input_sequence_num,
    		scr.max_input_sequence_num,
    		scr.inserted_record_count,
    		scr.last_update_date);
    